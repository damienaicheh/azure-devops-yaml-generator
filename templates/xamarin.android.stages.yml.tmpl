# This template was generated with the VS Code extension Azure Pipeline YAML Generator
# A quick tutorial on how to build, sign and deploy your Xamarin.Android application using Azure DevOps and App Center is available here:
# https://damienaicheh.github.io/xamarin/azure/devops/appcenter/2019/09/10/build-sign-and-deploy-your-xamarin-android-application-using-azure-devops-and-appcenter-en.html

# Change the vmImage option as you need.

{{#if updateIdentifier}}
# You need to install this set of extensions to update your identifiers:
# https://marketplace.visualstudio.com/items?itemName=vs-publisher-473885.motz-mobile-buildtasks
{{/if}}
{{#if automaticVersion}}
# You need to install this set of extensions to automatically manage the version of your application:
# https://marketplace.visualstudio.com/items?itemName=DamienAicheh.mobile-versioning-task
{{else}}
# You need to install a set of extensions to manually manage the version of your application:
# https://marketplace.visualstudio.com/items?itemName=vs-publisher-473885.motz-mobile-buildtasks       
{{/if}}
{{#if launchIconBadge}}
# You need to install this extension to add a banner to your launch icon:
# https://marketplace.visualstudio.com/items?itemName=DamienAicheh.launch-icon-task
{{/if}}
 
# Update all the variables just below.
# Assuming you will create a secret group to store all your secure keys and password here are the list of all the variables you need to add:
# - keystore
# - keystore.password
# - keystore.alias
# - keystore.aliasPassword

{{#if distribute}}   
# A quick tutorial to setup Azure DevOps and App Center to deploy your application is available here:
# https://damienaicheh.github.io/azure/devops/appcenter/2019/11/10/setup-azure-devops-and-appcenter-to-deploy-your-application-en.html
{{/if}}

{{#if useAab}}
# If you want to generate an universal apk for App Center from your Android App Bundle you will need to install this extension:
# https://marketplace.visualstudio.com/items?itemName=DamienAicheh.bundletool-tasks
# Also to use the InstallBundletool task you need to setup a simple github access token to automatically get the latest version of bundletool.
# Here are the list of the variables you need to add to the secure group:
# - username
# - githubPersonnalAccessToken

# A tutorial about this is available here:
# https://damienaicheh.github.io/xamarin/azure/devops/2020/05/05/universal-apk-from-aab-with-azure-devops-en.html
{{/if}}

trigger: none

pool:
  vmImage: {{vmImage}}

variables:
  - group: secret
  - name: xamarinSdkVersion
    value: '6_8_0'
  - name: solutionPath
    value: '**/*.sln'
  - name: buildConfiguration
    value: 'Release'
  {{#if updateIdentifier}}  
  - name: packageName
    value: ''
  - name: appLabel
    value: ''
  {{/if}}
  {{#unless automaticVersion}}
  - name: versionName
    value: '1.0'
  - name: versionCodeOffset
    value: '0'
  {{/unless}}
  {{#if distribute}}   
  - name: serverEndpoint # Visual Studio App Center endpoint
    value: ''
  - name: androidAppSlug
    value: ''
  - name: androidDistributionGroupId
    value: ''
  {{/if}}

stages:
  {{#if unitTests}}
  - stage: Run_Unit_Tests
    jobs:
      - job:
        displayName: 'Run Unit Tests'
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solutionPath)'

          - task: UseDotNet@2 
            displayName: ".NET Core 3.1.x"
            inputs:
              version: '3.1.x'
              packageType: sdk

          - task: DotNetCoreCLI@2
            displayName: Build
            inputs:
              command: build
              projects: '$(Build.SourcesDirectory)/{{projectName}}.Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'

          - task: DotNetCoreCLI@2
            inputs:
              command: test
              projects: '$(Build.SourcesDirectory)/{{projectName}}.Tests/*.csproj'
              arguments: '--configuration $(buildConfiguration)'
  {{/if}}

  - stage: Build_Xamarin_Android
    {{#if unitTests}}
    dependsOn: Run_Unit_Tests
    {{/if}}
    jobs:
      - job:
        displayName: 'Build Xamarin.Android'
        workspace:
          clean: all
        steps:
          - task: NuGetToolInstaller@1

          - task: NuGetCommand@2
            inputs:
              restoreSolution: '$(solutionPath)'

          {{#if updateIdentifier}}
          - task: android-manifest-package-name@1
            inputs:
              sourcePath: '$(Build.SourcesDirectory)/{{projectName}}/Properties/AndroidManifest.xml'
              packageName: '$(packageName)'
              appLabel: '$(appLabel)'
              printFile: true
          {{/if}}

          {{#if automaticVersion}}
          - task: ExtractVersionFromTag@1

          - task: UpdateAndroidVersionManifest@1
            inputs:
              androidManifestPath: '$(Build.SourcesDirectory)/{{projectName}}/Properties/AndroidManifest.xml'
          {{else}}
          - task: android-manifest-version@1
            inputs:
              sourcePath: '$(Build.SourcesDirectory)/{{projectName}}/Properties/AndroidManifest.xml'
              versionCodeOption: 'buildid'
              versionCode: '$(Build.BuildId)'
              versionCodeOffset: $(versionCodeOffset)
              versionName: '$(versionName).$(Build.BuildId)'
              printFile: true
          {{/if}}

          {{#if launchIconBadge}}
          - task: LaunchIconBadge@1
            inputs:
              sourceFolder: '$(Build.SourcesDirectory)/{{projectName}}/Resources'
              contents: '**/icon.png'
              bannerVersionNamePosition: 'bottomRight'
              bannerVersionNameText: '$(buildConfiguration)'
          {{/if}}

          - script: sudo $AGENT_HOMEDIRECTORY/scripts/select-xamarin-sdk.sh $(xamarinSdkVersion)
            displayName: 'Select the Xamarin SDK version'
            enabled: true

          - task: DownloadSecureFile@1
            name: keyStore
            displayName: "Download keystore from secure files"
            inputs:
              secureFile: '$(keystore)'

          - task: Bash@3
            displayName: "Build Android package"
            inputs:
              targetType: "inline"
              script: |
                msbuild -restore $(Build.SourcesDirectory)/{{projectName}}/*.csproj -t:SignAndroidPackage -p:AndroidPackageFormat={{#if useAab}}aab{{else}}apk{{/if}} -p:Configuration=$(buildConfiguration) -p:AndroidKeyStore=True -p:AndroidSigningKeyStore=$(keyStore.secureFilePath) -p:AndroidSigningStorePass=$(keystore.password) -p:AndroidSigningKeyAlias=$(keystore.alias) -p:AndroidSigningKeyPass=$(keystore.aliasPassword)
          
          {{#if generateArtifacts}}
          - task: CopyFiles@2
            displayName: 'Copy deliverables'
            inputs:
              SourceFolder: '$(Build.SourcesDirectory)/{{projectName}}/bin/$(buildConfiguration)'
              Contents: {{#if useAab}}'*Signed.aab'{{else}}'*Signed.apk'{{/if}}
              TargetFolder: 'drop/$(buildConfiguration)_android'

          - task: PublishBuildArtifacts@1
            displayName: 'Publish release'
            inputs:
              pathToPublish: 'drop/$(buildConfiguration)_android'
              artifactName: '$(buildConfiguration)_android'
          {{/if}}

  {{#if distribute}}
  - stage: Distribute_Android
    dependsOn: Build_Xamarin_Android
    jobs:
      - job:
        displayName: 'Distribute Xamarin.Android'
        steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifacts'
            inputs:
              buildType: 'current'
              downloadType: 'specific'
              downloadPath: 'releases_drop'

          {{#if useAab}}    
          - task: DownloadSecureFile@1
            name: keyStore
            displayName: "Download keystore from secure files"
            inputs:
              secureFile: '$(keystore)'

          - task: InstallBundletool@1
            inputs:
              username: '$(username)'
              personalAccessToken: '$(githubPersonnalAccessToken)'

          - task: AabConvertToUniversalApk@1
            inputs:
              aabFilePath: 'releases_drop/$(buildConfiguration)_android/*.aab'
              keystoreFilePath: '$(keyStore.secureFilePath)'
              keystorePassword: '$(keystore.password)'
              keystoreAlias: '$(keystore.alias)'
              keystoreAliasPassword: '$(keystore.aliasPassword)'
              outputFolder: 'releases_drop/$(buildConfiguration)_android/tmp'

          - task: AppCenterDistribute@3
            displayName: 'Distribute to Visual Studio App Center'
            inputs:
              serverEndpoint: '$(serverEndpoint)'
              appSlug: '$(androidAppSlug)'
              appFile: 'releases_drop/$(buildConfiguration)_android/tmp/*.apk'
              releaseNotesOption: 'input'
              releaseNotesInput: 'New Version'
              destinationType: 'groups'
              distributionGroupId: '$(androidDistributionGroupId)'

          {{else}}

          - task: AppCenterDistribute@3
            displayName: 'Distribute to Visual Studio App Center'
            inputs:
              serverEndpoint: '$(serverEndpoint)'
              appSlug: '$(androidAppSlug)'
              appFile: 'releases_drop/$(buildConfiguration)_android/*.apk'
              releaseNotesOption: 'input'
              releaseNotesInput: 'New Version'
              destinationType: 'groups'
              distributionGroupId: '$(androidDistributionGroupId)'
          {{/if}}
   {{/if}}